{"version":3,"sources":["assets/scripts/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAEN;AAEA;AAEA;AACA;AACA;AAGA;AAAsC;AAAtC;AAAA;AAGI;AAGA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AAGA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;;AA2tBJ;AACI;AACJ;AA3tBI;AAEA;AAEA;AACI;AACI;AACH;AACD;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACI;AACH;AACG;AACA;AACH;AACD;AACA;AACH;AACD;AACA;AACJ;AACA;AACI;AACA;AACA;AACJ;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AACI;AACI;AACH;AACG;AACA;AACH;AACL;AACA;AACI;AACI;AACA;AACI;AACI;AACA;AACH;AACJ;AACD;AACH;AACG;AACA;AACI;AACH;AACD;AACA;AACH;AACD;AACJ;AACA;AACI;AACI;AACA;AACI;AACI;AACA;AACH;AACJ;AACD;AACH;AACG;AACA;AACI;AACH;AACD;AACA;AACH;AACD;AACJ;AACA;AACI;AACI;AACA;AACI;AACI;AACA;AACH;AACJ;AACD;AACH;AACG;AACA;AACI;AACH;AACD;AACA;AACH;AACD;AACJ;AACA;AACI;AACA;AACA;AACJ;AACA;AACI;AACJ;AACA;AACI;AACA;AACJ;AAIA;AACI;AACA;AACI;AACI;AACH;AACJ;AACL;AACA;AAAQ;AACJ;AACA;AACA;AACA;AACA;AACJ;AACA;AAAW;AACP;AACI;AACI;AACA;AACA;AACI;AACH;AACD;AACI;AACA;AACH;AACG;AACA;AACH;AAEJ;AACJ;AACL;AACA;AAAA;AACI;AACA;AACI;AACH;AACD;AACA;AACQ;AACJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACI;AACH;AACD;AACA;;;AAZJ;AAAQ;AAaP;AACL;AACA;AACI;AACA;AACI;AACI;AACI;AACH;AACD;AACH;AACJ;AACD;AACJ;AACA;AACI;AACA;AACA;AACA;AACI;AACH;AACL;AACA;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACI;AACA;AACH;AACI;AACD;AACA;AACA;AACI;AACA;AACH;AACD;AACA;AACA;AACI;AACI;AACA;AACH;AACI;AACD;AACH;AACJ;AACJ;AACJ;AACD;AACI;AACH;AACG;AACA;AACH;AAED;AACA;AACA;AACA;AACH;AACI;AACD;AACI;AACA;AACA;AACA;AACI;AACA;AACH;AACI;AACD;AACA;AACA;AACI;AACA;AACH;AACD;AACA;AACA;AACI;AACI;AACA;AACH;AACI;AACD;AACH;AACJ;AACJ;AACJ;AACD;AACI;AACH;AACG;AACA;AACH;AACD;AACA;AACA;AACA;AACH;AACI;AACD;AACI;AACA;AACA;AACA;AACI;AACA;AACH;AACI;AACD;AACA;AACA;AACI;AACA;AACH;AACD;AACA;AACA;AACI;AACI;AACA;AACH;AACI;AACD;AACH;AACJ;AACJ;AACJ;AACD;AACI;AACH;AACG;AACA;AACH;AACD;AACA;AACA;AACA;AACH;AACI;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACL;AACA;AACI;AACI;AACI;AACH;AACI;AACD;AACH;AACI;AACD;AACH;AACI;AACD;AACH;AACI;AACD;AACH;AACI;AACD;AACH;AACI;AACD;AACH;AACI;AACD;AACH;AACD;AACH;AACG;AACA;AACI;AACH;AACI;AACD;AACH;AACD;AACH;AACL;AACA;AACI;AACJ;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACA;AACA;AACI;AACI;AACA;AACH;AACJ;AAED;AACJ;AACA;AACI;AACJ;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACA;AACA;AACI;AACA;AACA;AACI;AACH;AACJ;AACD;AACA;AACI;AACI;AACA;AACH;AACJ;AAED;AACJ;AACA;AACI;AACA;AACI;AACH;AACG;AACA;AACH;AACD;AACA;AACI;AACA;AACI;AACH;AACJ;AAED;AACJ;AACA;AACI;AACA;AACI;AAAkB;AACtB;AACJ;AACA;AACI;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACJ;AACA;AAAA;AAAW;AACP;AACA;AACI;AACH;AACG;AACA;AACA;AACA;AACH;AACL;AAKA;AACI;AACA;AACA;AACA;AACI;AACI;AACI;AACA;AACA;AACH;AACI;AACD;AACA;AACA;AACH;AACG;AACA;AACA;AACA;AACH;AACD;AACJ;AACI;AACI;AACA;AACH;AACD;AACI;AACI;AACH;AACD;AACH;AACD;AACJ;AACI;AACI;AACI;AACA;AACA;AACA;AACH;AACJ;AACI;AACD;AACA;AACA;AACH;AACR;AACL;AAEA;AACI;AACA;AACA;AACA;AACJ;AACA;AACI;AACA;AACA;AACA;AACJ;AACA;AACI;AACA;AACA;AACJ;AACA;AACI;AACA;AACA;AACJ;AACA;AACI;AACA;AACA;AACA;AACA;AACI;AACH;AACG;AACA;AACA;AACH;AACD;AACI;AACH;AACG;AACA;AACA;AACH;AACD;AACI;AACH;AACG;AACA;AACA;AACH;AACD;AACA;AACJ;AAEA;AACI;AACJ;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AACA;AAAA;AACI;AACI;AACH;AACD;AACI;AACH;AACD;AACA;AAEA;AACA;AACI;AAEA;AACA;AACA;AACJ;AACA;AACI;AACJ;AACA;AACI;AACJ;AACA;AAEI;AACI;AAEA;AAEA;AACA;AACA;AACA;AACJ;AACJ;AACJ;AAEJ;AAEI;AACI;AACA;AACE;AACD;AACD;AACF;AACF;AACI;AACA;AACA;AACC;AACD;AACJ;AACA;AACI;AACA;AACA;AACI;AACA;AACH;AACD;AACJ;AACA;AACI;AACA;AACI;AACH;AACD;AACJ;AACA;AACI;AACA;AACA;AACI;AACA;AACA;AACH;AACD;AACA;AACA;AACA;AACJ;AACA;AACI;AACA;AACI;AACH;AACD;AACA;AACJ;AAEA;AACI;AACA;AACI;AACH;AACD;AACJ;AACA;AACI;AACA;AACI;AACA;AACH;AACD;AACJ;AAnxBA;AADC;AAC8B;AAG/B;AADC;AACyB;AAE1B;AADC;AACuB;AAExB;AADC;AACuB;AAExB;AADC;AACuB;AAExB;AADC;AAC0B;AAE3B;AADC;AAC2B;AAG5B;AADC;AAC2B;AAG5B;AADC;AACyB;AAE1B;AADC;AACyB;AAE1B;AADC;AACyB;AAE1B;AADC;AAC4B;AAE7B;AADC;AAC4B;AAE7B;AADC;AAC4B;AAE7B;AADC;AAC6B;AAG9B;AADC;AACyB;AAE1B;AADC;AACyB;AAG1B;AADC;AAC2B;AAE5B;AADC;AAC0B;AAE3B;AADC;AAC6B;AAE9B;AADC;AAC2B;AAE5B;AADC;AACsB;AAlDN;AADpB;AACoB;AA0xBrB;AA1xBA;AAAqB","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nconst BITLENGTH = 1\r\n\r\nlet ws : WebSocket;//global variable for websocket\r\n\r\nvar ipstr = \"\"\r\nvar threecardname :string[] = [\"散牌\",\"對子\",\"三條\"]\r\nvar fivecardname :string[] = [\"散牌\",\"一對\",\"兩對\",\"三條\",\"順子\",\"同花\",\"葫蘆\",\"四條\",\"同花順\"]\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    @property(cc.SpriteAtlas)\r\n    cardsbg: cc.SpriteAtlas = null;\r\n\r\n    @property(cc.Node)\r\n    cardsample:cc.Node = null;\r\n    @property(cc.Node)\r\n    mainnode:cc.Node = null;\r\n    @property(cc.Node)\r\n    roomnode:cc.Node = null;\r\n    @property(cc.Node)\r\n    namenode:cc.Node = null;\r\n    @property(cc.Node)\r\n    roombtnnode:cc.Node = null;\r\n    @property(cc.Node)\r\n    roomviewnode:cc.Node = null;\r\n\r\n    @property(cc.Layout)\r\n    cardlayout:cc.Layout[] = [];\r\n\r\n    @property(cc.Button)\r\n    deckbtn1:cc.Button = null;\r\n    @property(cc.Button)\r\n    deckbtn2:cc.Button = null;\r\n    @property(cc.Button)\r\n    deckbtn3:cc.Button = null;\r\n    @property(cc.Button)\r\n    joingamebtn:cc.Button = null;\r\n    @property(cc.Button)\r\n    joinroombtn:cc.Button = null;\r\n    @property(cc.Button)\r\n    exitroombtn:cc.Button = null;\r\n    @property(cc.Button)\r\n    exitlobbybtn:cc.Button = null;\r\n\r\n    @property(cc.EditBox)\r\n    nameedb:cc.EditBox = null;\r\n    @property(cc.EditBox)\r\n    roomedb:cc.EditBox = null;\r\n\r\n    @property(cc.Label)\r\n    winnerlabel:cc.Label = null;\r\n    @property(cc.Label)\r\n    timerlabel:cc.Label = null;\r\n    @property(cc.Label)\r\n    cmpstatelabel:cc.Label = null;\r\n    @property(cc.Label)\r\n    personcount:cc.Label = null;\r\n    @property(cc.Label)\r\n    plabel:cc.Label[] = [];\r\n\r\n    cardarray:number[][] = [];// array index 0: front set, 1: middle set, 2: back set, 3: player hand\r\n    cardtemp:number[] = [];\r\n    scorearray:number[] = [12,0,1,2,3,4,5,6,7,8,9,10,11];\r\n    gamestarted:boolean = false;\r\n\r\n    roomtemp;\r\n    roombtnnodearray:cc.Node[] = [];\r\n\r\n    yourname:string = \"\"\r\n    yourseat:number = 0\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    initmainnode(){\r\n        for(let i:number=0;i<4;i++){\r\n            this.cardarray.push([])\r\n        }\r\n        this.deckbtn1.node.on(\"click\",this.deck1clicked,this)\r\n        this.deckbtn2.node.on(\"click\",this.deck2clicked,this)\r\n        this.deckbtn3.node.on(\"click\",this.deck3clicked,this)\r\n        for(let i:number=0;i<52;i++){//init card button\r\n            let cardbtn:cc.Node = cc.instantiate(this.cardsample)\r\n            cardbtn.name = (i%13).toString()\r\n            cardbtn.y = 0\r\n            if(Math.floor(i/13)==3){\r\n                cardbtn.on(\"click\",this.playercardclicked,this)\r\n            }\r\n            else{\r\n                cardbtn.getComponent(cc.Button).interactable = false\r\n            }\r\n            cardbtn.active = false\r\n            cardbtn.parent =  this.cardlayout[Math.floor(i/13)].node\r\n        }\r\n        this.setdeck()\r\n        this.exitlobbybtn.node.on(\"click\",this.ExitLobbySendToServer,this)\r\n    }\r\n    initroomnode(){\r\n        this.roomnode.x = 0\r\n        this.joinroombtn.node.on(\"click\",this.joinroomclicked,this)\r\n        this.exitroombtn.node.on(\"click\",this.ExitRoomSendToServer,this)\r\n    }\r\n    initnamenode(){\r\n        this.namenode.x = 0\r\n        this.joingamebtn.node.on(\"click\",this.joingameclicked,this)\r\n    }\r\n    initconnect(){\r\n        let ip = prompt(\"Server IP:\");\r\n        this.SetUpServer(ip)\r\n    }\r\n\r\n    start () {\r\n        this.initmainnode()\r\n        this.initroomnode()\r\n        this.initnamenode()\r\n        this.mainnode.active = false\r\n        this.roomnode.active = false\r\n        this.namenode.active = false\r\n        //this.cardsbg.getSpriteFrame(\"0\")\r\n        this.initconnect()\r\n    }\r\n\r\n    playercardclicked(thiscard:cc.Button){\r\n        if(thiscard.node.y==0){\r\n            thiscard.node.y = 20\r\n        }\r\n        else{\r\n            thiscard.node.y = 0\r\n        }\r\n    }\r\n    deck1clicked(){\r\n        if(this.cardarray[0].length == 0){\r\n            this.getslectedcard()\r\n            if(this.cardtemp.length == 5){\r\n                for(let i=0;i<5;i++){\r\n                    this.cardarray[0].push(this.cardtemp[i])\r\n                    this.cardarray[3].splice(this.cardarray[3].indexOf(this.cardtemp[i]),1)\r\n                }\r\n            }\r\n            this.cardrender(true)\r\n        }\r\n        else{\r\n            for(let i=0;i<5;i++){\r\n                this.cardarray[3].push(this.cardarray[0][i])\r\n            }\r\n            this.cardarray[0] = []\r\n            this.cardrender(true)\r\n        }\r\n        this.SetCardSendToServer()\r\n    }\r\n    deck2clicked(){\r\n        if(this.cardarray[1].length == 0){\r\n            this.getslectedcard()\r\n            if(this.cardtemp.length == 3){\r\n                for(let i=0;i<3;i++){\r\n                    this.cardarray[1].push(this.cardtemp[i])\r\n                    this.cardarray[3].splice(this.cardarray[3].indexOf(this.cardtemp[i]),1)\r\n                }\r\n            }\r\n            this.cardrender(true)\r\n        }\r\n        else{\r\n            for(let i=0;i<3;i++){\r\n                this.cardarray[3].push(this.cardarray[1][i])\r\n            }\r\n            this.cardarray[1] = []\r\n            this.cardrender(true)\r\n        }\r\n        this.SetCardSendToServer()\r\n    }\r\n    deck3clicked(){\r\n        if(this.cardarray[2].length == 0){\r\n            this.getslectedcard()\r\n            if(this.cardtemp.length == 5){\r\n                for(let i=0;i<5;i++){\r\n                    this.cardarray[2].push(this.cardtemp[i])\r\n                    this.cardarray[3].splice(this.cardarray[3].indexOf(this.cardtemp[i]),1)\r\n                }\r\n            }\r\n            this.cardrender(true)\r\n        }\r\n        else{\r\n            for(let i=0;i<5;i++){\r\n                this.cardarray[3].push(this.cardarray[2][i])\r\n            }\r\n            this.cardarray[2] = []\r\n            this.cardrender(true)\r\n        }\r\n        this.SetCardSendToServer()\r\n    }\r\n    joingameclicked(){\r\n        let nickname = this.nameedb.string\r\n        this.yourname = nickname\r\n        this.JoinGameSendToServer(nickname)\r\n    }\r\n    joinroombtnclicked(roomname:string){\r\n        this.JoinRoomSendToServer(roomname)\r\n    }\r\n    joinroomclicked(){\r\n        let roomname = this.roomedb.string\r\n        this.JoinRoomSendToServer(roomname)\r\n    }\r\n\r\n\r\n\r\n    getslectedcard(){\r\n        this.cardtemp = []\r\n        for(let i:number=0;i<this.cardarray[3].length;i++){\r\n            if(this.cardlayout[3].node.getChildByName(i.toString()).y == 20){\r\n                this.cardtemp.push(this.cardarray[3][i])\r\n            }\r\n        }\r\n    }\r\n    setdeck(handarr:number[] = [0,1,2,3,4,5,6,7,8,9,10,11,12]){\r\n        this.cardarray[0] = []\r\n        this.cardarray[1] = []\r\n        this.cardarray[2] = []\r\n        this.cardarray[3] = handarr\r\n        this.cardrender()\r\n    }\r\n    cardrender(resetpos:boolean=false){\r\n        for(let i=0;i<4;i++){\r\n            for(let j:number=0;j<13;j++){\r\n                let thisbtn:cc.Node = this.cardlayout[i].node.getChildByName(j.toString())\r\n                this.cardarray[i].sort((a, b) => a - b)\r\n                if(resetpos){\r\n                    thisbtn.y = 0\r\n                }\r\n                if(j<this.cardarray[i].length){\r\n                    thisbtn.active = true\r\n                    thisbtn.getComponentInChildren(cc.Sprite).spriteFrame = this.cardsbg.getSpriteFrame((this.cardarray[i][j]+1).toString())\r\n                }\r\n                else{\r\n                    thisbtn.active = false\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    roomrender(){\r\n        cc.log(this.roomtemp)\r\n        for(let i:number=0;i<this.roombtnnodearray.length;i++){\r\n            this.roombtnnodearray[i].destroy()\r\n        }\r\n        this.roombtnnodearray = []\r\n        this.roomviewnode.setContentSize(new cc.Size(220,60*this.roomtemp.length))\r\n        for(let i:number=0;i<this.roomtemp.length;i++){\r\n            let personcount = this.getpersoncount(this.roomtemp[i])\r\n           \r\n            let thisroom = cc.instantiate(this.roombtnnode)\r\n            thisroom.parent = this.roomviewnode\r\n            thisroom.x = 0\r\n            thisroom.y = -thisroom.getContentSize().height/2-thisroom.getContentSize().height*i\r\n            thisroom.getComponentInChildren(cc.Label).string = this.roomtemp[i][\"Name\"]+\"\\t\"+personcount.toString()+\"p\"\r\n            if(personcount==4){\r\n                thisroom.getComponent(cc.Button).interactable = false\r\n            }\r\n            thisroom.on(\"click\",()=>{this.joinroombtnclicked(this.roomtemp[i][\"Name\"])},this)\r\n            this.roombtnnodearray.push(thisroom)\r\n        }\r\n    }\r\n    getpersoncount(roomtempi:object){\r\n        let personcount = 0\r\n        for(let j=0;j<roomtempi[\"Players\"].length;j++){\r\n            if(roomtempi[\"Players\"][j] != \"\"){\r\n                if(roomtempi[\"Players\"][j] == this.yourname){\r\n                    this.yourseat = j\r\n                }\r\n                personcount++\r\n            }\r\n        }\r\n        return personcount\r\n    }\r\n    setdeckclickable(clickable:boolean){\r\n        this.deckbtn1.interactable = clickable\r\n        this.deckbtn2.interactable = clickable\r\n        this.deckbtn3.interactable = clickable\r\n        for(let i=0;i<13;i++){\r\n            this.cardlayout[3].node.getChildByName(i.toString()).getComponent(cc.Button).interactable = clickable\r\n        }\r\n    }\r\n    startpersentation(currentdeepth:number,presentearray:number[][]){\r\n        let score = 0\r\n        let maxscore = -1\r\n        let winner = 0\r\n        this.plabel[0].string = \"you \"\r\n        this.plabel[3].string = this.roomtemp[0][\"Players\"][(this.yourseat+1)%4]+\" \"\r\n        this.plabel[2].string = this.roomtemp[0][\"Players\"][(this.yourseat+2)%4]+\" \"\r\n        this.plabel[1].string = this.roomtemp[0][\"Players\"][(this.yourseat+3)%4]+\" \"\r\n        if(currentdeepth == 0){\r\n            this.exitroombtn.interactable = false\r\n            let thiscolor = this.deckbtn1.disabledColor\r\n            thiscolor.a = 0\r\n            this.deckbtn1.disabledColor = thiscolor\r\n            this.deckbtn2.disabledColor = thiscolor\r\n            this.deckbtn3.disabledColor = thiscolor\r\n            for(let i=0;i<4;i++){\r\n                this.cardarray[i] = presentearray[(this.yourseat+1+i)%4].slice(0,3).sort((a, b) => a - b)\r\n                score = this.getscore(this.cardarray[i])\r\n                this.plabel[3-i].string+=threecardname[score]\r\n                if(score>maxscore){\r\n                    winner = i\r\n                    maxscore = score\r\n                }\r\n                else if(score==maxscore){\r\n                    let score1:number[] = []\r\n                    let score2:number[] = []\r\n                    for(let j=0;j<this.cardarray[i].length;j++){\r\n                        score1.push(this.scorearray[this.cardarray[winner][j]%13])\r\n                        score2.push(this.scorearray[this.cardarray[i][j]%13])\r\n                    }\r\n                    score1 = score1.sort((a, b) => a - b)\r\n                    score2 = score2.sort((a, b) => a - b)\r\n                    for(let j=this.cardarray[i].length-1;j>=0;j--){\r\n                        if(score2[j]>score1[j]){\r\n                            winner = i\r\n                            break\r\n                        }\r\n                        else if(score2[j]<score1[j]){\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (3-winner==0){\r\n                this.winnerlabel.string = \"Winner: YOU!!\"\r\n            }\r\n            else{\r\n                this.winnerlabel.string = \"Winner: player\"+(3-winner).toString()\r\n            }\r\n            \r\n            this.cmpstatelabel.string = \"頭！\"\r\n            this.cmpstatelabel.node.getComponent(cc.Animation).play(\"cmpstateclip\")\r\n            this.cardrender(true)\r\n            this.scheduleOnce(()=>{this.startpersentation.bind(this)(currentdeepth+1,presentearray)},4)\r\n        }\r\n        else if(currentdeepth == 1){\r\n            for(let i=0;i<4;i++){\r\n                this.cardarray[i] = presentearray[(this.yourseat+1+i)%4].slice(3,8).sort((a, b) => a - b)\r\n                score = this.getscore(this.cardarray[i])\r\n                this.plabel[3-i].string+=fivecardname[score]\r\n                if(score>maxscore){\r\n                    winner = i\r\n                    maxscore = score\r\n                }\r\n                else if(score==maxscore){\r\n                    let score1:number[] = []\r\n                    let score2:number[] = []\r\n                    for(let j=0;j<this.cardarray[i].length;j++){\r\n                        score1.push(this.scorearray[this.cardarray[winner][j]%13])\r\n                        score2.push(this.scorearray[this.cardarray[i][j]%13])\r\n                    }\r\n                    score1 = score1.sort((a, b) => a - b)\r\n                    score2 = score2.sort((a, b) => a - b)\r\n                    for(let j=this.cardarray[i].length-1;j>=0;j--){\r\n                        if(score2[j]>score1[j]){\r\n                            winner = i\r\n                            break\r\n                        }\r\n                        else if(score2[j]<score1[j]){\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (3-winner==0){\r\n                this.winnerlabel.string = \"Winner: YOU!!\"\r\n            }\r\n            else{\r\n                this.winnerlabel.string = \"Winner: player\"+(3-winner).toString()\r\n            }\r\n            this.cmpstatelabel.string = \"二道\"\r\n            this.cmpstatelabel.node.getComponent(cc.Animation).play(\"cmpstateclip\")\r\n            this.cardrender(true)\r\n            this.scheduleOnce(()=>{this.startpersentation.bind(this)(currentdeepth+1,presentearray)},4)\r\n        }\r\n        else if(currentdeepth == 2){\r\n            for(let i=0;i<4;i++){\r\n                this.cardarray[i] = presentearray[(this.yourseat+1+i)%4].slice(8).sort((a, b) => a - b)\r\n                score = this.getscore(this.cardarray[i])\r\n                this.plabel[3-i].string+=fivecardname[score]\r\n                if(score>maxscore){\r\n                    winner = i\r\n                    maxscore = score\r\n                }\r\n                else if(score==maxscore){\r\n                    let score1:number[] = []\r\n                    let score2:number[] = []\r\n                    for(let j=0;j<this.cardarray[i].length;j++){\r\n                        score1.push(this.scorearray[this.cardarray[winner][j]%13])\r\n                        score2.push(this.scorearray[this.cardarray[i][j]%13])\r\n                    }\r\n                    score1 = score1.sort((a, b) => a - b)\r\n                    score2 = score2.sort((a, b) => a - b)\r\n                    for(let j=this.cardarray[i].length-1;j>=0;j--){\r\n                        if(score2[j]>score1[j]){\r\n                            winner = i\r\n                            break\r\n                        }\r\n                        else if(score2[j]<score1[j]){\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (3-winner==0){\r\n                this.winnerlabel.string = \"Winner: YOU!!\"\r\n            }\r\n            else{\r\n                this.winnerlabel.string = \"Winner: player\"+(3-winner).toString()\r\n            }\r\n            this.cmpstatelabel.string = \"尾\"\r\n            this.cmpstatelabel.node.getComponent(cc.Animation).play(\"cmpstateclip\")\r\n            this.cardrender(true)\r\n            this.scheduleOnce(()=>{this.startpersentation.bind(this)(currentdeepth+1,presentearray)},4)\r\n        }\r\n        else if(currentdeepth == 3){\r\n            this.plabel[0].string = \"手牌\"\r\n            this.plabel[1].string = \"尾\"\r\n            this.plabel[2].string = \"頭\"\r\n            this.plabel[3].string = \"二道\"\r\n            this.winnerlabel.string = \"\"\r\n            this.cmpstatelabel.string = \"\"\r\n            this.exitroombtn.interactable = true\r\n            let thiscolor = this.deckbtn1.disabledColor\r\n            thiscolor.a = 200\r\n            this.deckbtn1.disabledColor = thiscolor\r\n            this.deckbtn2.disabledColor = thiscolor\r\n            this.deckbtn3.disabledColor = thiscolor\r\n            this.setdeck()\r\n        }\r\n    }\r\n    getscore(card:number[]){\r\n        if(card.length == 5){\r\n            if(this.is同花順(card)){\r\n                return 8\r\n            }\r\n            else if(this.is四條(card)){\r\n                return 7\r\n            }\r\n            else if(this.is葫蘆(card)){\r\n                return 6\r\n            }\r\n            else if(this.is同花(card)){\r\n                return 5\r\n            }\r\n            else if(this.is順子(card)){\r\n                return 4\r\n            }\r\n            else if(this.is三條(card)){\r\n                return 3\r\n            }\r\n            else if(this.is兩對(card)){\r\n                return 2\r\n            }\r\n            else if(this.is一對(card)){\r\n                return 1\r\n            }\r\n            return 0\r\n        }\r\n        else{\r\n            if(this.is三條(card)){\r\n                return 2\r\n            }\r\n            else if(this.is一對(card)){\r\n                return 1\r\n            }\r\n            return 0\r\n        }\r\n    }\r\n    is同花順(card:number[]){\r\n        return Math.floor(card[0]/13) == Math.floor(card[4]/13)&&card[1]==card[2]-1&&card[1]==card[3]-2&&card[1]==card[4]-3&&(card[1]-1==card[0] && card[0]%13!=0 || card[0]%13==0&&card[4]%13==12)\r\n    }\r\n    is四條(card:number[]){\r\n        let cardtemp:number[] = [card[0]%13,card[1]%13,card[2]%13,card[3]%13,card[4]%13]\r\n        return this.countarr(cardtemp,cardtemp[0])==4 || this.countarr(cardtemp,cardtemp[1]) == 4\r\n    }\r\n    is葫蘆(card:number[]){\r\n        let cardtemp:number[] = [card[0]%13,card[1]%13,card[2]%13,card[3]%13,card[4]%13]\r\n        let count1 = this.countarr(cardtemp,cardtemp[0])\r\n        let count2 = 0\r\n        for(let i = 0;i<3;i++){\r\n            if(cardtemp[0]!=cardtemp[i+1]){\r\n                count2 = this.countarr(cardtemp,cardtemp[i+1])\r\n                break\r\n            }\r\n        }\r\n        \r\n        return count1 == 3 && count2 == 2 || count1 == 2 && count2 == 3\r\n    }\r\n    is同花(card:number[]){\r\n        return Math.floor(card[0]/13) == Math.floor(card[1]/13) && Math.floor(card[0]/13) == Math.floor(card[2]/13) && Math.floor(card[0]/13) == Math.floor(card[3]/13) && Math.floor(card[0]/13) == Math.floor(card[4]/13)\r\n    }\r\n    is順子(card:number[]){\r\n        let cardtemp:number[] = [card[0]%13,card[1]%13,card[2]%13,card[3]%13,card[4]%13].sort((a, b) => a - b)\r\n        return cardtemp[1]==cardtemp[2]-1&&cardtemp[1]==cardtemp[3]-2&&cardtemp[1]==cardtemp[4]-3&&(cardtemp[1]-1==cardtemp[0] && cardtemp[0]!=0 || cardtemp[0]==0&&cardtemp[4]==12)\r\n    }\r\n    is三條(card:number[]){\r\n        let cardtemp:number[] = [card[0]%13,card[1]%13,card[2]%13]\r\n        return this.countarr(cardtemp,cardtemp[0])==3 || this.countarr(cardtemp,cardtemp[1]) == 3 || this.countarr(cardtemp,cardtemp[2]) == 3\r\n    }\r\n    is兩對(card:number[]){\r\n        let cardtemp:number[] = [card[0]%13,card[1]%13,card[2]%13,card[3]%13,card[4]%13]\r\n        let start:number = 0\r\n        let count1 = this.countarr(cardtemp,cardtemp[0])\r\n        if(count1!=2){\r\n            count1 = this.countarr(cardtemp,cardtemp[1])\r\n            start = 1\r\n            if(count1!=2){\r\n                return false\r\n            }\r\n        }\r\n        let count2 = 0\r\n        for(let i = start;i<3;i++){\r\n            if(cardtemp[start]!=cardtemp[i+1]){\r\n                count2 = this.countarr(cardtemp,cardtemp[i+1])\r\n                break\r\n            }\r\n        }\r\n        \r\n        return count2 == 2\r\n    }\r\n    is一對(card:number[]){\r\n        let cardtemp:number[] = [card[0]%13,card[1]%13,card[2]%13,card[3]%13,card[4]%13]\r\n        if(card.length == 5){\r\n            cardtemp = [card[0]%13,card[1]%13,card[2]%13,card[3]%13,card[4]%13]\r\n        }\r\n        else{\r\n            cardtemp = [card[0]%13,card[1]%13,card[2]%13]\r\n        }\r\n        let count1 = 0\r\n        for(let i = 0;i<card.length-1;i++){\r\n            count1 = this.countarr(cardtemp,cardtemp[i])\r\n            if(count1==2){\r\n                return true\r\n            }\r\n        }\r\n        \r\n        return false\r\n    }\r\n    countarr(array:number[],ele:number){\r\n        let count = 0\r\n        for(let i=0;i<array.length;i++)\r\n            if(array[i]==ele) count++\r\n        return count\r\n    }\r\n    fillcard(){\r\n        if(this.cardarray[1].length!=3){\r\n            this.cardarray[1] = this.cardarray[1].concat(this.cardarray[3].slice(0,3))\r\n            this.cardarray[3] = this.cardarray[3].slice(3)\r\n        }\r\n        if(this.cardarray[0].length!=5){\r\n            this.cardarray[0] = this.cardarray[0].concat(this.cardarray[3].slice(0,5))\r\n            this.cardarray[3] = this.cardarray[3].slice(5)\r\n        }\r\n        if(this.cardarray[2].length!=5){\r\n            this.cardarray[2] = this.cardarray[2].concat(this.cardarray[3].slice(0,5))\r\n            this.cardarray[3] = this.cardarray[3].slice(5)\r\n        }\r\n        this.cardrender()\r\n    }\r\n    timerstart(second:number=25){\r\n        this.timerlabel.string = second.toString()\r\n        if(second>0){\r\n            this.scheduleOnce(()=>{this.timerstart(second-1)},1)\r\n        }\r\n        else{\r\n            this.timerlabel.string = \"\"\r\n            this.fillcard()\r\n            this.setdeckclickable(false)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    ReceivedFromServer(data :string){\r\n        cc.log(\"Received data!\")\r\n        var dataobj = JSON.parse(data)\r\n        cc.log(\"Type:\",dataobj[\"Type\"])\r\n        switch(dataobj[\"Type\"]){\r\n            case \"LocationMsg\":\r\n                if(dataobj[\"Location\"]==0){\r\n                    this.mainnode.active = false\r\n                    this.roomnode.active = false\r\n                    this.namenode.active = true\r\n                }\r\n                else if(dataobj[\"Location\"]==1){\r\n                    this.mainnode.active = false\r\n                    this.roomnode.active = true\r\n                    this.namenode.active = false\r\n                }\r\n                else{\r\n                    this.mainnode.active = true\r\n                    this.roomnode.active = false\r\n                    this.namenode.active = false\r\n                }\r\n                break\r\n            case \"RoomMsg\":\r\n                if(dataobj[\"Rooms\"]!=this.roomtemp){\r\n                    this.roomtemp = dataobj[\"Rooms\"]\r\n                    this.roomrender()\r\n                }\r\n                if(dataobj[\"Rooms\"].length>0){\r\n                    if(this.getpersoncount(dataobj[\"Rooms\"][0])!=4){\r\n                        this.setdeckclickable(false)\r\n                    }\r\n                    this.personcount.string = \"目前房間人數： \"+this.getpersoncount(dataobj[\"Rooms\"][0]).toString()+\" 人\"\r\n                }\r\n                break\r\n            case \"CardMsg\":\r\n                if(dataobj[\"Cards\"][(this.yourseat+1)%4][0]==-1){\r\n                    if(!this.gamestarted){\r\n                        this.timerstart()\r\n                        this.setdeck(dataobj[\"Cards\"][this.yourseat])\r\n                        this.gamestarted = true\r\n                        this.setdeckclickable(true)\r\n                    }\r\n                }\r\n                else if(this.gamestarted){\r\n                    this.setdeckclickable(false)\r\n                    this.gamestarted = false\r\n                    this.startpersentation(0,dataobj[\"Cards\"])\r\n                }\r\n        }\r\n    }\r\n\r\n    JoinGameSendToServer(nickname:string){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"join.lobby\"\r\n        rtobj[\"Name\"] = nickname\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    JoinRoomSendToServer(roomname:string){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"join.room\"\r\n        rtobj[\"Name\"] = roomname\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    ExitRoomSendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"exit.room\"\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    ExitLobbySendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"exit.lobby\"\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    SetCardSendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"set.card\"\r\n        let sendcards:number[] = []\r\n        let loc = 0\r\n        if(this.cardarray[1].length==3){\r\n            sendcards = sendcards.concat(this.cardarray[1])\r\n        }\r\n        else{\r\n            sendcards = sendcards.concat(this.cardarray[3].slice(loc,loc+3))\r\n            loc+=3\r\n        }\r\n        if(this.cardarray[0].length==5){\r\n            sendcards = sendcards.concat(this.cardarray[0])\r\n        }\r\n        else{\r\n            sendcards = sendcards.concat(this.cardarray[3].slice(loc,loc+5))\r\n            loc+=5\r\n        }\r\n        if(this.cardarray[2].length==5){\r\n            sendcards = sendcards.concat(this.cardarray[2])\r\n        }\r\n        else{\r\n            sendcards = sendcards.concat(this.cardarray[3].slice(loc,loc+5))\r\n            loc+=5\r\n        }\r\n        rtobj[\"Cards\"] = sendcards\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n\r\n    SendToServerPack(rtobj:object){\r\n        this.SendToServer(new Uint8Array(this.string2Bin(JSON.stringify(rtobj))))\r\n    }\r\n    SendToServer(s:Uint8Array) {//Send Uint8Array to server\r\n        //cc.log(s)\r\n        ws.send(s)\r\n    }\r\n    SetUpServerProxy(){//Function for reconnecting server\r\n        cc.log(\"Reconnecting...\")\r\n        this.SetUpServer(ipstr)\r\n    }\r\n    SetUpServer(ip:string) {//Set up server.\r\n        try{\r\n            ws = new WebSocket(\"wss://\"+ip+\"/\")\r\n        }\r\n        catch{\r\n            return\r\n        }\r\n        //cc.log(\"ajdhflajkhdflk\")\r\n        //cc.find(\"IpLabel\",this.idbox.node).getComponent(cc.Label).string = \"Server IP: \"+ip\r\n        \r\n        ws.binaryType = 'arraybuffer'\r\n        ws.onopen = (evt)=> {\r\n            // for reconnect code to active again if connection closed.\r\n\r\n            this.unschedule(this.SetUpServerProxy)//Stop the restart server schedule\r\n            cc.log(\"Connection open ...\")\r\n            this.namenode.active = true\r\n        }\r\n        ws.onmessage = (evt)=> {  \r\n            this.ReceivedFromServer(evt.data)\r\n        }\r\n        ws.onerror = (evt)=> {\r\n            console.error(\"WebSocket error observed:\"+ evt);\r\n        }\r\n        ws.onclose = (evt)=> {\r\n            \r\n            //if (server_status_int==1 || server_status_int==-1) {//1 = close expectly -1 = close normally\r\n                cc.log(\"Connection closed.\")\r\n\r\n                //this.DisableUi()//Disable ui while connection is closed\r\n\r\n                //if(server_status_int==1){//keep retrying to connect the server\r\n                //    this.schedule(this.SetUpServerProxy\r\n                //    ,2,cc.macro.REPEAT_FOREVER)\r\n                //}\r\n            //}\r\n        }\r\n    }\r\n\r\n/* ***************************** WEBSOCKET DATA TRANSFORM FUNCTIONS ***************************** */\r\n    \r\n    string2Bin(str) {//****FUNCTION COPIED FROM INTERNET**** TURNING STRING TO BYTES  https://stackoverflow.com/questions/3195865/converting-byte-array-to-string-in-javascript\r\n        var result = []\r\n        for (var i = 0; i < str.length; i++) {\r\n          result.push(str.charCodeAt(i))\r\n        }\r\n        return result\r\n      }\r\n    bin2String(array) {//****FUNCTION COPIED FROM INTERNET**** TURNING BYTES TO STRING  https://stackoverflow.com/questions/3195865/converting-byte-array-to-string-in-javascript\r\n        var result = \"\"\r\n        for (var i = 0; i < array.length; i++) {\r\n        result += String.fromCharCode(array[i])\r\n        }\r\n        return result\r\n    }\r\n    GetIntBytes( x ){//****FUNCTION COPIED FROM INTERNET**** TURNING INT TO BYTES  https://stackoverflow.com/questions/8482309/converting-javascript-integer-to-byte-array-and-back\r\n        var bytes = [];//MODEFIED BY CLIFFSU (FOR HANDLING 大小端 PROBLEM)\r\n        var i = 0\r\n        do {\r\n            bytes[i++] = x & (255)\r\n            x = x>>8\r\n        } while ( i<BITLENGTH )\r\n        return bytes\r\n    }\r\n    GetBytesInt( x ){//****FUNCTION COPIED FROM INTERNET**** TURNING BYTES TO INT  https://stackoverflow.com/questions/8482309/converting-javascript-integer-to-byte-array-and-back\r\n        var val = 0;//MODEFIED BY CLIFFSU (FOR HANDLING 大小端 PROBLEM)\r\n        for (var i = 0; i < x.length; ++i) {        \r\n            val += x[i] << 8*i\r\n        }\r\n        return val\r\n    }\r\n    PackNumber(n: number){//Pack numer to websocket sending format\r\n        var sign = 1\r\n        var tag = \"p\"\r\n        if (n<=0){\r\n            sign = -1\r\n            n*=sign\r\n            tag = \"n\"\r\n        }\r\n        var bs = this.GetIntBytes(n)\r\n        var bytesarr = this.string2Bin(tag)\r\n        bytesarr = bytesarr.concat(bs)\r\n        return bytesarr\r\n    }\r\n    UnpackNumber(n:Uint8Array){//From websocket sending format unpack to numer\r\n        var sign = 1\r\n        if (this.bin2String(n[0])==\"n\"){\r\n            sign = -1\r\n        }\r\n        n=n.slice(1)\r\n        return this.GetBytesInt(n)*sign\r\n    }\r\n\r\n    EncodeData(numarr:Uint8Array){//Encode the number array to byte data\r\n        var bytedataarr = []\r\n        for(var i = 0; i < numarr.length;i++){\r\n            bytedataarr = bytedataarr.concat(this.PackNumber(numarr[i]))\r\n        }\r\n        return bytedataarr\r\n    }\r\n    DecodeData(data){//Decode the byte data to numer array\r\n        var retarr = []\r\n        while(data.length>0){\r\n            retarr.push(this.UnpackNumber(data.slice(0,BITLENGTH+1)))\r\n            data = data.slice(BITLENGTH+1)\r\n        }\r\n        return new Uint8Array(retarr)\r\n    }\r\n\r\n/* ***************************** /WEBSOCKET DATA TRANSFORM FUNCTIONS/ ***************************** */\r\n    // update (dt) {}\r\n}\r\n"],"file":"index.js"}