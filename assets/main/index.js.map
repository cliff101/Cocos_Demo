{"version":3,"sources":["assets/script/board.ts","assets/script/main.ts","assets/script/score.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEA;AAEM;AAGN;AAAmC;AAAnC;AAAA;AAGI;AAGA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AA0QA;AACJ;AAzQI;AAEA;AAEA;AAAA;AACI;AACA;AACA;AACJ;AAEA;AAAA;AACI;AACA;AAEA;AACQ;AACI;AACJ;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;;AATJ;AAAQ;AAUP;;;AAXL;AAAQ;AAYP;AACD;AACJ;AAEA;AAAyD;AACrD;AACA;AACA;AACI;AACH;AACD;AACA;AACI;AACI;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACI;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AACA;AACJ;AACI;AACA;AACA;AACA;AACJ;AACI;AACA;AACA;AACP;AAEJ;AACD;AACI;AACH;AACL;AAEA;AAAA;AACI;AACA;AACI;AACA;AACH;AACI;AACD;AACA;AACH;AACG;AAEH;AACL;AACA;AACI;AACI;AACH;AACI;AACD;AACH;AACG;AACA;AACH;AACL;AACA;AACI;AACA;AACA;AACA;AACJ;AACA;AACI;AACJ;AAEA;AACI;AACA;AACJ;AACA;AACI;AACA;AACA;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACI;AACI;AACA;AACH;AACJ;AACJ;AACI;AACD;AACI;AACI;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACD;AACA;AACJ;AACA;AACI;AACI;AACA;AACH;AACI;AACD;AACA;AACH;AACI;AACD;AACA;AACH;AACD;AACI;AACI;AACA;AACI;AACH;AACD;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACA;AACI;AACA;AACH;AACI;AACD;AACA;AACH;AACJ;AACJ;AACJ;AACD;AACA;AACJ;AACA;AACI;AACI;AACI;AACH;AACJ;AACD;AACJ;AACA;AACI;AACI;AACH;AACD;AACJ;AACA;AACI;AACA;AACA;AACI;AACI;AACA;AACI;AACH;AACD;AACI;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACI;AACI;AACA;AACA;AACA;AACA;AACH;AACI;AACD;AACA;AACA;AACA;AACA;AACH;AACG;AACA;AACH;AACL;AACA;AACI;AACA;AACA;AACA;AACI;AACH;AACI;AACD;AACH;AACG;AACA;AACH;AACD;AACI;AACH;AACI;AACD;AACH;AACG;AACA;AACH;AACD;AACJ;AAhTA;AADC;AAC8B;AAG/B;AADC;AAC8B;AAE/B;AADC;AAC8B;AAE/B;AADC;AACgC;AAEjC;AADC;AACgC;AAEjC;AADC;AAC8B;AAE/B;AADC;AACgC;AAEjC;AADC;AACiC;AAGlC;AADC;AACwB;AAGzB;AADC;AACwB;AAEzB;AADC;AACuB;AAGxB;AADC;AAC8B;AAE/B;AADC;AAC8B;AA/Bd;AADpB;AACoB;AAqTrB;AArTA;AAAqB;;;;;;;;;ACXrB;;;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEM;AAEN;AACA;AAGA;AAA0B;AAA1B;AAAA;AAKI;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AACA;AACA;;AA2cJ;AACA;AA1cA;AACI;AACI;AACA;AACA;AACA;AACA;AACJ;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACJ;AACJ;AACA;AAEI;AACI;AACA;AACE;AACD;AACD;AACF;AACF;AACI;AACA;AACA;AACC;AACD;AACJ;AACA;AACI;AACA;AACA;AACI;AACA;AACH;AACD;AACJ;AACA;AACI;AACA;AACI;AACH;AACD;AACJ;AACA;AACI;AACA;AACA;AACI;AACA;AACA;AACH;AACD;AACA;AACA;AACA;AACJ;AACA;AACI;AACA;AACI;AACH;AACD;AACA;AACJ;AAEA;AACI;AACA;AACI;AACH;AACD;AACJ;AACA;AACI;AACA;AACI;AACA;AACH;AACD;AACJ;AAEJ;AAEA;AAEA;AAEI;AACI;AACA;AACA;AACA;AACJ;AACA;;;;;;;;AAQE;AACF;AACI;AACA;AACA;AACA;AACJ;AACA;;;;;;;;AAQE;AACF;AACI;AACA;AACA;AACA;AACJ;AACA;;;;;;;;AAQE;AACF;AACI;AACA;AACA;AACA;AACJ;AACA;;;;;;;;;;;;AAYE;AACF;AACI;AACA;AACA;AACA;AACA;AACJ;AACA;;;;;AAKE;AACF;AACI;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;;;;;AAKE;AACF;AACI;AACA;AACA;AACA;AACA;AACJ;AACA;;;;;AAKE;AAEF;AACI;AACA;AACA;AACA;AACI;AACI;AACA;AACA;AACA;AACA;AACJ;AACI;AACI;AACH;AACD;AACA;AACJ;AACI;AACA;AACJ;AACI;AACA;AACJ;AACI;AACA;AACJ;AACI;AACA;AACJ;AACI;AACA;AACA;AACP;AACD;AACA;AACI;AACH;AACG;AACA;AACH;AACL;AAEA;AAAgC;AAC5B;AACI;AACA;AACH;AACG;AACA;AACH;AACL;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AACA;AAAA;AACI;AACI;AACH;AACD;AACI;AACA;AACH;AACD;AACA;AAEA;AACA;AACI;AACA;AAEA;AACA;AACA;AACA;AACJ;AACA;AACI;AACJ;AACA;AACI;AACJ;AACA;AAEI;AACI;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACJ;AACJ;AACA;AACI;AACA;AACA;AACJ;AAEJ;AAGA;AACI;AACI;AACA;AACA;AACJ;AACA;AACI;AACI;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACH;AACL;AACA;AAAA;AACI;AACI;AACI;AACA;AACI;AACH;AACD;AACJ;AACI;AACJ;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AACP;AACD;AACI;AACI;AACA;AACA;AACJ;AACI;AACJ;AACI;AACA;AACP;AACL;AACA;AACI;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACH;AACD;AACJ;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AACJ;AACI;AACA;AACP;AAEL;AACA;AAAA;AACI;AACA;AACJ;AACA;AAAA;AACI;AACJ;AACA;AACI;AACI;AACA;AACA;AACH;AACG;AACA;AACA;AACA;AACH;AACL;AACA;AACI;AACA;AACA;AACI;AACH;AACD;AACA;AACJ;AACA;AAAU;AACN;AACA;AACA;AACI;AACH;AAEL;AACJ;AACA;AACI;AACI;AACA;AACJ;AACA;AACI;AACA;AACJ;AACA;AAAA;AACI;AACA;AACA;AACJ;AACA;AACI;AACA;AACJ;AA3fA;AADC;AACsB;AAEvB;AADC;AACyB;AAE1B;AADC;AACuB;AAExB;AADC;AAC8B;AAG/B;AADC;AAC4B;AAE7B;AADC;AACyB;AAE1B;AADC;AAC4B;AAE7B;AADC;AACwB;AAGzB;AADC;AACwB;AAEzB;AADC;AAC0B;AAE3B;AADC;AAC4B;AAG7B;AADC;AACwB;AAEzB;AADC;AACwB;AAGzB;AADC;AAC4B;AAE7B;AADC;AAC4B;AAG7B;AADC;AAC2B;AAG5B;AADC;AACwB;AAGzB;AADC;AAC4B;AA9CpB;AADZ;AACY;AAkgBb;AAlgBA;AAAa;;;;;;;;;ACpBb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAGN;AAAmC;AAAnC;AAAA;AAGI;AAEA;AAEA;;AAuCA;AACJ;AAtCI;AAEA;AAEA;AAEA;AAAsC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACI;AACI;AACH;AACD;AACA;AACH;AACG;AACA;AACH;AACD;AACH;AACD;AAEJ;AAEA;AACI;AACJ;AAzCA;AADC;AAC6B;AAE9B;AADC;AAC2B;AALX;AADpB;AACoB;AA+CrB;AA/CA;AAAqB","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport Score from \"./score\"\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Board extends cc.Component {\r\n\r\n    @property(cc.Button)\r\n    button_sample:cc.Button = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    minepic: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    flagpic: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    openedpic: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    unknowpic: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    safepic: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    dangerpic: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    numberpics: cc.SpriteFrame[] = [];\r\n\r\n    @property(Score)\r\n    scorescrypt:Score = null;\r\n\r\n    @property(cc.Toggle)\r\n    auto_tg:cc.Toggle = null;\r\n    @property(cc.Toggle)\r\n    pro_tg:cc.Toggle = null;\r\n\r\n    @property(cc.AudioClip)\r\n    mine_click:cc.AudioClip = null;\r\n    @property(cc.AudioClip)\r\n    flag_click:cc.AudioClip = null;\r\n\r\n    board_btn_node :cc.Node[] = [];\r\n    board_temp: number[] = [];\r\n    board_temp_full: number[] = [];\r\n    height:number = 0;\r\n    width:number = 0;\r\n    isleftmousebtn: number = 0;//0=left 1=right -1=middle\r\n    \r\n    mainscript = null;\r\n    safeindex:number[] = []\r\n    dangerindex:number[] = []\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        this.mainscript = cc.find(\"Canvas\").getComponent(\"main\")\r\n        this.node.on(cc.Node.EventType.MOUSE_DOWN,this.leftrightbtndet,this)\r\n        this.pro_tg.node.on(\"toggle\",()=>{this.UpdateBoard(this.board_temp_full,this.height,this.width,true)},this)\r\n    }\r\n\r\n    InitBoard(boardarr:number[],height:number,width:number){\r\n        this.height = height;\r\n        this.width = width;\r\n        \r\n        this.node.setContentSize(cc.size(width*40,height*40));\r\n        for(let i=0;i<height;i++){\r\n            for(let j=0;j<width;j++){\r\n                let field:cc.Node = cc.instantiate(this.button_sample.node)\r\n                field.parent = this.node\r\n                field.x = i*40-height*20\r\n                field.y = j*40-width*20\r\n                field.on(\"click\",()=>{\r\n                    this.fieldclicked(i*width+j)\r\n                },this)\r\n                this.board_btn_node.push(field)\r\n                this.board_temp.push(-2)\r\n            }\r\n        }\r\n        this.UpdateBoard(boardarr,height,width)\r\n    }\r\n\r\n    UpdateBoard(boardarr:number[],height:number,width:number,force:boolean = false){\r\n        //boardarr[1524] = 1///eflkjghsdlukfjhsdkjfhcasdkijfhsido    ////debug memory...\r\n        let updated:boolean = false\r\n        if(height!=this.height || width!=this.width){\r\n            this.InitBoard(boardarr,height,width)\r\n        }\r\n        this.board_temp_full = boardarr\r\n        for(let i=0;i<boardarr.length;i++){\r\n            if(this.board_temp[i] == boardarr[i]%10 && !force){\r\n                continue\r\n            }\r\n            updated = true\r\n            this.board_temp[i] = boardarr[i]%10\r\n            var fieldval = boardarr[i]%10\r\n            let playerid:number = Math.floor(boardarr[i]/10)\r\n            this.resetbtncolor(this.board_btn_node[i].getComponent(cc.Button))\r\n            switch(fieldval){\r\n                case -1:\r\n                    this.board_btn_node[i].getComponentInChildren(cc.Sprite).spriteFrame = this.unknowpic\r\n                    this.board_btn_node[i].getComponent(cc.Button).interactable = true\r\n                    break\r\n                case 0:\r\n                    this.board_btn_node[i].getComponentInChildren(cc.Sprite).spriteFrame = this.openedpic\r\n                    this.board_btn_node[i].getComponent(cc.Button).interactable = false\r\n                    this.setbtnrndcolor(this.board_btn_node[i].getComponent(cc.Button),playerid)\r\n                    break\r\n                case 9:\r\n                    this.board_btn_node[i].getComponentInChildren(cc.Sprite).spriteFrame = this.flagpic\r\n                    this.board_btn_node[i].getComponent(cc.Button).interactable = false\r\n                    this.setbtnrndcolor(this.board_btn_node[i].getComponent(cc.Button),playerid)\r\n                    break\r\n                default:\r\n                    this.board_btn_node[i].getComponentInChildren(cc.Sprite).spriteFrame = this.numberpics[fieldval-1]\r\n                    this.board_btn_node[i].getComponent(cc.Button).interactable = false\r\n                    this.setbtnrndcolor(this.board_btn_node[i].getComponent(cc.Button),playerid)\r\n            }\r\n            \r\n        }\r\n        if(updated){\r\n            this.updatesafedanger()\r\n        }\r\n    }\r\n\r\n    fieldclicked(btnindex:number){\r\n        cc.log(\"Clicked:\",btnindex)\r\n        if(this.isleftmousebtn==0){\r\n            cc.audioEngine.playEffect(this.mine_click,false)\r\n            this.mainscript.SendToServerQueue(()=>{this.mainscript.ActionClickSendToServer.bind(this.mainscript)(btnindex,false)},this.mainscript)\r\n        }\r\n        else if(this.isleftmousebtn==1){\r\n            cc.audioEngine.playEffect(this.flag_click,false)\r\n            this.mainscript.SendToServerQueue(()=>{this.mainscript.ActionClickSendToServer.bind(this.mainscript)(btnindex,true)},this.mainscript)\r\n        }\r\n        else{\r\n\r\n        }\r\n    }\r\n    leftrightbtndet(evt:cc.Event.EventMouse){\r\n        if(evt.getButton() == cc.Event.EventMouse.BUTTON_LEFT){\r\n            this.isleftmousebtn = 0\r\n        }\r\n        else if(evt.getButton() == cc.Event.EventMouse.BUTTON_RIGHT){\r\n            this.isleftmousebtn = 1\r\n        }\r\n        else{\r\n            this.isleftmousebtn = -1\r\n        }\r\n    }\r\n    resetbtncolor(btn:cc.Button){\r\n        btn.normalColor = new cc.Color(255,255,255)\r\n        btn.pressedColor = new cc.Color(200,200,200)\r\n        btn.hoverColor = new cc.Color(230,230,230)\r\n        btn.disabledColor = new cc.Color(230,230,230)\r\n    }\r\n    setbtnrndcolor(btn:cc.Button,playerid:number){\r\n        btn.disabledColor = this.scorescrypt.player_color_map[playerid]\r\n    }\r\n    \r\n    updatesafedanger(){\r\n        this.updatesafemap()\r\n        //this.setsafedanger()\r\n    }\r\n    updatesafemap(){\r\n        let safeindextemp:number[] = []\r\n        let dangerindextemp:number[] = []\r\n        for(var i=0;i<this.board_temp.length;i++){\r\n            if(this.board_temp[i]>0 && this.board_temp[i]<9){\r\n                //if(i==1524){//debug memory...\r\n                //    cc.log(1524)\r\n                //}\r\n                let minecount:number = this.board_temp[i]\r\n                let flagindexs = this.checkflagaround(i,true)\r\n                let flagaround = flagindexs.length\r\n                let unknowindexs = this.checkflagaround(i,false)\r\n                let unknowaround = unknowindexs.length\r\n                unknowindexs = this.includinghandle(i,unknowindexs,minecount-flagaround)\r\n                let rtcode = unknowindexs.pop()\r\n                if(rtcode == 1){\r\n                    for(var j=0;j<unknowindexs.length;j++){\r\n                        if(dangerindextemp.indexOf(unknowindexs[j])==-1){\r\n                            dangerindextemp.push(unknowindexs[j])\r\n                            this.board_btn_node[unknowindexs[j]].getComponentInChildren(cc.Sprite).spriteFrame = this.dangerpic\r\n                        }\r\n                    }\r\n                }\r\n                else if(rtcode == 0){\r\n                    for(var j=0;j<unknowindexs.length;j++){\r\n                        if(safeindextemp.indexOf(unknowindexs[j])==-1){\r\n                            safeindextemp.push(unknowindexs[j])\r\n                            this.board_btn_node[unknowindexs[j]].getComponentInChildren(cc.Sprite).spriteFrame = this.safepic\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.safeindex = safeindextemp\r\n        this.dangerindex = dangerindextemp\r\n    }\r\n    includinghandle(index:number,oriunknowindexs:number[],oriminecount:number):number[]{//1 = mine  0 = safe  -1 = failed\r\n        if(oriminecount==oriunknowindexs.length){\r\n            oriunknowindexs.push(1)\r\n            return oriunknowindexs\r\n        }\r\n        else if(oriminecount==0){\r\n            oriunknowindexs.push(0)\r\n            return oriunknowindexs\r\n        }\r\n        else if(!this.pro_tg.isChecked){\r\n            oriunknowindexs.push(-1)\r\n            return oriunknowindexs\r\n        }\r\n        for(var i= (Math.floor(index/this.width)>1?-2:Math.floor(index/this.width)>0?-1:0);i<(Math.floor(index/this.width)<(this.height-2)?3:Math.floor(index/this.width)<(this.height-1)?2:1);i++){\r\n            for(var j=((index%this.width>1)?-2:(index%this.width>0)?1:0);j<((index%this.width)<(this.width-2)?3:(index%this.width)<(this.width-1)?2:1);j++){\r\n                var thisindex = index+i*this.width+j\r\n                if(thisindex==index || this.board_temp[thisindex]<1 || this.board_temp[thisindex]>8){\r\n                    continue\r\n                }\r\n                let minecount:number = this.board_temp[thisindex]\r\n                let flagindexs = this.checkflagaround(thisindex,true)\r\n                let flagaround = flagindexs.length\r\n                let unknowindexs = this.checkflagaround(thisindex,false)\r\n                let unknowaround = unknowindexs.length\r\n                \r\n                if(this.aisinb(unknowindexs,oriunknowindexs)){\r\n                    oriunknowindexs = this.aawayfromb(unknowindexs,oriunknowindexs)\r\n                    oriminecount-=minecount-flagaround\r\n                    if(oriminecount==oriunknowindexs.length){\r\n                        oriunknowindexs.push(1)\r\n                        return oriunknowindexs\r\n                    }\r\n                    else if(oriminecount==0){\r\n                        oriunknowindexs.push(0)\r\n                        return oriunknowindexs\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        oriunknowindexs.push(-1)\r\n        return oriunknowindexs\r\n    }\r\n    aisinb(a:any[],b:any[]):boolean{\r\n        for(var i=0;i<a.length;i++){\r\n            if(b.indexOf(a[i])==-1){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    aawayfromb(a:any[],b:any[]):number[]{\r\n        for(var i=0;i<a.length;i++){\r\n            b = b.filter((value: any, index: number, array: any[]) => value!=a[i])\r\n        }\r\n        return b\r\n    }\r\n    checkflagaround(index:number,isflag:boolean):number[]{\r\n        let flagindex:number[] = []//last is count\r\n        let count:number = 0\r\n        for(var i= (Math.floor(index/this.width)>0?-1:0);i<(Math.floor(index/this.width)<(this.height-1)?2:1);i++){\r\n            for(var j=((index%this.width>0)?-1:0);j<((index%this.width)<(this.width-1)?2:1);j++){\r\n                var thisindex = index+i*this.width+j\r\n                if(thisindex==index){\r\n                    continue\r\n                }\r\n                if(isflag?this.board_temp[thisindex]==9:(this.board_temp[thisindex]==-1)){\r\n                    flagindex.push(thisindex)\r\n                }\r\n            }\r\n        }\r\n        return flagindex\r\n    }\r\n    autoclick(target:any){\r\n        if(target.safeindex.length>0 && Math.random()>0.5 || target.dangerindex.length==0 && target.safeindex.length!=0){\r\n            cc.log(\"autoclick safe\")\r\n            target.isleftmousebtn=0\r\n            target.buttoninview(target.safeindex[target.safeindex.length-1],target)\r\n            target.fieldclicked(target.safeindex[target.safeindex.length-1])\r\n            target.safeindex.pop()\r\n        }\r\n        else if(target.dangerindex.length>0){\r\n            cc.log(\"autoclick danger\")\r\n            target.isleftmousebtn=1\r\n            target.buttoninview(target.dangerindex[target.dangerindex.length-1],target)\r\n            target.fieldclicked(target.dangerindex[target.dangerindex.length-1])\r\n            target.dangerindex.pop()\r\n        }\r\n        else{\r\n            this.auto_tg.isChecked = false\r\n        }\r\n    }\r\n    buttoninview(index:number,target:any){\r\n        let x = -target.board_btn_node[index].x\r\n        let y = -target.board_btn_node[index].y\r\n        cc.log(x,y)\r\n        if(x<-target.node.width/2+380){\r\n            target.node.x = -target.node.width/2+380\r\n        }\r\n        else if(x>target.node.width/2-380){\r\n            target.node.x = target.node.width/2-380\r\n        }\r\n        else{\r\n            target.node.x = x\r\n        }\r\n        if(y<-target.node.height/2+320){\r\n            target.node.y = -target.node.height/2+320\r\n        }\r\n        else if(y>target.node.height/2-320){\r\n            target.node.y = target.node.height/2-320\r\n        }\r\n        else{\r\n            target.node.y = y\r\n        }\r\n        cc.log(target.node.x,target.node.y)\r\n    }\r\n    // update (dt) {}\r\n}\r\n","\r\n/* ***************************** DEFINITION ***************************** */\r\n\r\n// import { threadId } from \"worker_threads\"\r\n\r\nconst BITLENGTH = 1\r\n\r\nlet ws : WebSocket;//global variable for websocket\r\nvar server_status_int = 0;//global variable declaring the server status\r\n\r\nvar ipstr = \"\"\r\n\r\n// ***************************** /DEFINITION/ ***************************** //\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nimport Board from \"./board\"\r\nimport Score from \"./score\"\r\n\r\n@ccclass\r\nexport class Game extends cc.Component {\r\n\r\n\r\n\r\n    @property(cc.Node)\r\n    UiNode: cc.Node = null;\r\n    @property(cc.Node)\r\n    connectui: cc.Node = null;\r\n    @property(cc.Node)\r\n    DieNode: cc.Node = null;\r\n    @property(cc.Node)\r\n    alivelabelnode: cc.Node = null;\r\n\r\n    @property(cc.Button)\r\n    connectbtn: cc.Button = null;\r\n    @property(cc.Button)\r\n    playbtn: cc.Button = null;\r\n    @property(cc.Button)\r\n    newgamebtn: cc.Button = null;\r\n    @property(cc.Button)\r\n    logbtn: cc.Button = null;\r\n\r\n    @property(cc.EditBox)\r\n    ipbox: cc.EditBox = null;\r\n    @property(cc.EditBox)\r\n    namebox: cc.EditBox = null;\r\n    @property(cc.EditBox)\r\n    passwdbox: cc.EditBox = null;\r\n\r\n    @property(Board)\r\n    boardscrypt:Board = null;\r\n    @property(Score)\r\n    scorescrypt:Score = null;\r\n\r\n    @property(cc.Label)\r\n    playerlabel: cc.Label = null;\r\n    @property(cc.Label)\r\n    loggidlabel: cc.Label = null;\r\n\r\n    @property(cc.Slider)\r\n    logslider: cc.Slider = null;\r\n\r\n    @property(cc.Toggle)\r\n    auto_tg:cc.Toggle = null;\r\n\r\n    @property(cc.AudioClip)\r\n    cat_hiss:cc.AudioClip = null;\r\n\r\n    \r\n\r\n    requesttype:number = -1;//-1 = free to send to server  0 = init board  1 = update board  2 = get players  3 = get history  4 = action join  5 = action click  6 = system nextgame\r\n    stsqueuearr:Function[] = [];\r\n    historyscore:Object[] = [];\r\n    yourname:string = \"\"\r\n    yourscore:number = 0\r\n\r\n/************************************* INITIAL *************************************/\r\n    onLoad(){\r\n        //this.connectui.setContentSize(this.node.getContentSize())\r\n        this.DieNode.active = false\r\n        this.DieNode.y = 0\r\n        this.DisableUi()\r\n        this.logslider.node.active = false\r\n    }\r\n\r\n    start () {\r\n        this.connectui.y = 0\r\n        this.connectbtn.node.on(\"click\",this.ConnectToServer,this)\r\n        this.playbtn.node.on(\"click\",this.JoinGame,this)\r\n        this.newgamebtn.node.on(\"click\",this.NewGame,this)\r\n        this.logbtn.node.on(\"click\",this.LogClicked,this)\r\n        this.logslider.node.on(\"slide\",this.LogSelect,this)\r\n    }\r\n/************************************* /INITIAL/ *************************************/\r\n/* ***************************** WEBSOCKET DATA TRANSFORM FUNCTIONS ***************************** */\r\n    \r\n    string2Bin(str) {//****FUNCTION COPIED FROM INTERNET**** TURNING STRING TO BYTES  https://stackoverflow.com/questions/3195865/converting-byte-array-to-string-in-javascript\r\n        var result = []\r\n        for (var i = 0; i < str.length; i++) {\r\n          result.push(str.charCodeAt(i))\r\n        }\r\n        return result\r\n      }\r\n    bin2String(array) {//****FUNCTION COPIED FROM INTERNET**** TURNING BYTES TO STRING  https://stackoverflow.com/questions/3195865/converting-byte-array-to-string-in-javascript\r\n        var result = \"\"\r\n        for (var i = 0; i < array.length; i++) {\r\n        result += String.fromCharCode(array[i])\r\n        }\r\n        return result\r\n    }\r\n    GetIntBytes( x ){//****FUNCTION COPIED FROM INTERNET**** TURNING INT TO BYTES  https://stackoverflow.com/questions/8482309/converting-javascript-integer-to-byte-array-and-back\r\n        var bytes = [];//MODEFIED BY CLIFFSU (FOR HANDLING 大小端 PROBLEM)\r\n        var i = 0\r\n        do {\r\n            bytes[i++] = x & (255)\r\n            x = x>>8\r\n        } while ( i<BITLENGTH )\r\n        return bytes\r\n    }\r\n    GetBytesInt( x ){//****FUNCTION COPIED FROM INTERNET**** TURNING BYTES TO INT  https://stackoverflow.com/questions/8482309/converting-javascript-integer-to-byte-array-and-back\r\n        var val = 0;//MODEFIED BY CLIFFSU (FOR HANDLING 大小端 PROBLEM)\r\n        for (var i = 0; i < x.length; ++i) {        \r\n            val += x[i] << 8*i\r\n        }\r\n        return val\r\n    }\r\n    PackNumber(n: number){//Pack numer to websocket sending format\r\n        var sign = 1\r\n        var tag = \"p\"\r\n        if (n<=0){\r\n            sign = -1\r\n            n*=sign\r\n            tag = \"n\"\r\n        }\r\n        var bs = this.GetIntBytes(n)\r\n        var bytesarr = this.string2Bin(tag)\r\n        bytesarr = bytesarr.concat(bs)\r\n        return bytesarr\r\n    }\r\n    UnpackNumber(n:Uint8Array){//From websocket sending format unpack to numer\r\n        var sign = 1\r\n        if (this.bin2String(n[0])==\"n\"){\r\n            sign = -1\r\n        }\r\n        n=n.slice(1)\r\n        return this.GetBytesInt(n)*sign\r\n    }\r\n\r\n    EncodeData(numarr:Uint8Array){//Encode the number array to byte data\r\n        var bytedataarr = []\r\n        for(var i = 0; i < numarr.length;i++){\r\n            bytedataarr = bytedataarr.concat(this.PackNumber(numarr[i]))\r\n        }\r\n        return bytedataarr\r\n    }\r\n    DecodeData(data){//Decode the byte data to numer array\r\n        var retarr = []\r\n        while(data.length>0){\r\n            retarr.push(this.UnpackNumber(data.slice(0,BITLENGTH+1)))\r\n            data = data.slice(BITLENGTH+1)\r\n        }\r\n        return new Uint8Array(retarr)\r\n    }\r\n\r\n/* ***************************** /WEBSOCKET DATA TRANSFORM FUNCTIONS/ ***************************** */\r\n\r\n/* ***************************** WEBSOCKET CONNECTION FUNCTIONS ***************************** */\r\n\r\n//Note that byte is 8 bits(Uint8), so the byte array is just the Uint8Array.\r\n\r\n    InitBoardSendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"get.board\"\r\n        this.requesttype = 0\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:\r\n{\r\n    \"GID\": 0,               // Game index\r\n    \"Height\": 64,           // Number of game rows\r\n    \"Width\": 64,            // Number of game columns\r\n    \"Playing\": true,        // Game has started\r\n    \"Client\": [-1, -1, ...] // Integer Array with (Height * Width) elements, -1 value is means unknown, other value is PlayerID * 10 + X, X is the number of mines around, if X is 9 it means the flag has been set up \r\n}\r\n    */\r\n    UpdateBoardSendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"get.board\"\r\n        this.requesttype = 1\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:\r\n[\r\n    {\r\n        \"Alive\": true,      // The player is Alive\r\n        \"Name\": \"nickname\", // Player's nickname\r\n        \"Score\": 0,         // Player's score\r\n    }, ...\r\n]   // All players in current game\r\n    */\r\n    GetPlayerSendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"get.players\"\r\n        this.requesttype = 2\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:\r\n{\r\n    \"GID\": 0,               // Game index\r\n    \"Height\": 64,           // Number of game rows\r\n    \"Width\": 64,            // Number of game columns\r\n    \"Playing\": true,        // Game has started\r\n    \"Client\": [-1, -1, ...] // Integer Array with (Height * Width) elements, -1 value is means unknown, other value is PlayerID * 10 + X, X is the number of mines around, if X is 9 it means the flag has been set up \r\n}\r\n    */\r\n    GetHistorySendToServer(){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"get.history\"\r\n        this.requesttype = 3\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:[\r\n    {\r\n        \"GID\": 0,       // Game index\r\n        \"Players\":  [\r\n                        {\r\n                            \"Alive\": true,      // The player is Alive\r\n                            \"Name\": \"nickname\", // Player's nickname\r\n                            \"Score\": 0,         // Player's score\r\n                        }, ...\r\n                    ]   // All players in that game\r\n    }, ...\r\n]   // All player records in server\r\n    */\r\n    ActionJoinSendToServer(nickname:string){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"action.join\"\r\n        rtobj[\"Name\"] = nickname\r\n        this.requesttype = 4\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:\r\n{\r\n    \"Code\": 0,  // Status code, 0: successed, 1: name already used, 2: current players is full, 3: game players is full, 4: already in the game\r\n    \"Pid\": 0    // If successed, this is your player index\r\n}\r\n    */\r\n    ActionClickSendToServer(locind:number,isflag:boolean){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"action.click\"\r\n        rtobj[\"Index\"] = locind // Element index of game array\r\n        rtobj[\"Flag\"] = isflag // false: normal click, true: set up flag\r\n        this.requesttype = 5\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:\r\n{\r\n    \"Code\": 0,  // Status code, 0: successed, 1: has been clicked, 2: player is dead, 3: have not join game, 4: game has not started\r\n    \"Score\": 0  // -1: you died, 0: click failed, other: score obtained\r\n}\r\n    */\r\n    NewGameSendToServer(passwd:string){\r\n        var rtobj = new Object\r\n        rtobj[\"Type\"] = \"system.nextgame\"\r\n        rtobj[\"Name\"] = passwd // System command password\r\n        this.requesttype = 6\r\n        this.SendToServerPack(rtobj)\r\n    }\r\n    /*Response:\r\n{\r\n    \"Code\": 0,  // Status code, 0: successed, 1: failed\r\n    \"Msg\": 0    // System message\r\n}\r\n    */\r\n    \r\n    ReceivedFromServer(data :string){\r\n        cc.log(\"Received data!\")\r\n        //cc.log(data,this.requesttype)\r\n        var dataobj = JSON.parse(data)\r\n        switch(this.requesttype){\r\n            case 0://InitBoardSendToServer\r\n                this.boardscrypt.InitBoard(dataobj[\"Client\"],dataobj[\"Height\"],dataobj[\"Width\"])\r\n                this.schedule(this.UpdateAllStatus,0.3,cc.macro.REPEAT_FOREVER)\r\n                this.EnableUi()\r\n                //this.boardscrypt.buttoninview(4032,this.boardscrypt)\r\n                break\r\n            case 1://UpdateBoardSendToServer\r\n                if(dataobj[\"Playing\"]==false){\r\n                    this.playbtn.interactable = true\r\n                }\r\n                this.boardscrypt.UpdateBoard(dataobj[\"Client\"],dataobj[\"Height\"],dataobj[\"Width\"])\r\n                break\r\n            case 2://GetPlayerSendToServer\r\n                this.UpdatePlayerState(dataobj)\r\n                break\r\n            case 3://GetHistorySendToServer\r\n                this.SetupLog(dataobj)\r\n                break\r\n            case 4://ActionJoinSendToServer\r\n                this.JoinGameretManager(dataobj)\r\n                break\r\n            case 5://ActionClickSendToServer\r\n                this.ClickFieldretManager(dataobj)\r\n                break\r\n            case 6://NewGameSendToServer\r\n                cc.log(\"new game return received\")\r\n                cc.log(\"Code:\",dataobj[\"Code\"])\r\n                break\r\n        }\r\n        this.stsqueuearr = this.stsqueuearr.slice(1)\r\n        if(this.stsqueuearr.length>0){\r\n            this.stsqueuearr[0]()\r\n        }\r\n        else{\r\n            this.requesttype = -1\r\n        }\r\n    }\r\n\r\n    SendToServerQueue(stsf:Function,target:any=this){\r\n        if(this.requesttype == -1){\r\n            this.stsqueuearr.push(stsf.bind(target))\r\n            this.stsqueuearr[0]()\r\n        }\r\n        else{\r\n            this.stsqueuearr.push(stsf.bind(this))\r\n        }\r\n    }\r\n    SendToServerPack(rtobj:object){\r\n        this.SendToServer(new Uint8Array(this.string2Bin(JSON.stringify(rtobj))))\r\n        server_status_int=-1\r\n    }\r\n    SendToServer(s:Uint8Array) {//Send Uint8Array to server\r\n        //cc.log(s)\r\n        ws.send(s)\r\n    }\r\n    SetUpServerProxy(){//Function for reconnecting server\r\n        cc.log(\"Reconnecting...\")\r\n        this.SetUpServer(ipstr)\r\n    }\r\n    SetUpServer(ip:string) {//Set up server.\r\n        try{\r\n            ws = new WebSocket(\"wss://\"+ip+\"/\")\r\n        }\r\n        catch{\r\n            this.DisableUi()\r\n            return\r\n        }\r\n        //cc.log(\"ajdhflajkhdflk\")\r\n        //cc.find(\"IpLabel\",this.idbox.node).getComponent(cc.Label).string = \"Server IP: \"+ip\r\n        \r\n        ws.binaryType = 'arraybuffer'\r\n        ws.onopen = (evt)=> {\r\n            server_status_int = 1;//If server connected successfully, turn server status int to 1 to proved that it have ever been connected,\r\n            // for reconnect code to active again if connection closed.\r\n\r\n            this.unschedule(this.SetUpServerProxy)//Stop the restart server schedule\r\n            cc.log(\"Connection open ...\")\r\n            this.SendToServerQueue(this.GetPlayerSendToServer,this)\r\n            this.SendToServerQueue(this.InitBoardSendToServer,this)\r\n        }\r\n        ws.onmessage = (evt)=> {  \r\n            this.ReceivedFromServer(evt.data)\r\n        }\r\n        ws.onerror = (evt)=> {\r\n            console.error(\"WebSocket error observed:\"+ evt);\r\n        }\r\n        ws.onclose = (evt)=> {\r\n            \r\n            //if (server_status_int==1 || server_status_int==-1) {//1 = close expectly -1 = close normally\r\n                cc.log(\"Connection closed.\")\r\n\r\n                //this.DisableUi()//Disable ui while connection is closed\r\n\r\n                //if(server_status_int==1){//keep retrying to connect the server\r\n                //    this.schedule(this.SetUpServerProxy\r\n                //    ,2,cc.macro.REPEAT_FOREVER)\r\n                //}\r\n                this.unschedule(this.UpdateAllStatus)\r\n                this.DisableUi()\r\n                server_status_int=0//This can prevent server reconnect code start more than once\r\n            //}\r\n        }\r\n    }\r\n    ConnectToServer(){\r\n        ipstr = this.ipbox.string\r\n        this.connectui.active = false\r\n        this.SetUpServer(ipstr)\r\n    }\r\n\r\n/* ***************************** /WEBSOCKET FUNCTIONS/ ***************************** */\r\n\r\n\r\n/********************************** OTHERFUNCTION **********************************/\r\n    UpdateAllStatus(){\r\n        cc.log(\"Update board\")\r\n        this.SendToServerQueue(this.UpdateBoardSendToServer)\r\n        this.SendToServerQueue(this.GetPlayerSendToServer)\r\n    }\r\n    UpdatePlayerState(retinfo:Object){\r\n        if(this.historyscore.length==0){\r\n            this.scorescrypt.SetScore(retinfo,this.scorescrypt)\r\n        }\r\n        let keys:string[] = Object.keys(retinfo).filter((value: string) => retinfo[value][\"Alive\"])\r\n        let sizetemp:cc.Size = this.alivelabelnode.getContentSize()\r\n        sizetemp.height = (keys.length+1)*20\r\n        this.alivelabelnode.setContentSize(sizetemp)\r\n        let alivelabel:cc.Label = this.alivelabelnode.getComponentInChildren(cc.Label)\r\n        alivelabel.string = \"Alive Player:\\n\"\r\n        for(var i=0;i<keys.length;i++){\r\n            alivelabel.string+=retinfo[keys[i]][\"Name\"]+\"\\n\"\r\n        }\r\n    }\r\n    ClickFieldretManager(retinfo:Object){\r\n        switch(retinfo[\"Code\"]){\r\n            case 0:\r\n                this.UpdateAllStatus()\r\n                if(this.auto_tg.isChecked){\r\n                    this.schedule(()=>{this.boardscrypt.autoclick(this.boardscrypt)},0.1,0)\r\n                }\r\n                break\r\n            case 1:\r\n                break\r\n            case 2:\r\n                alert(\"You are dead!!\")\r\n                this.playbtn.interactable = true\r\n                break\r\n            case 3:\r\n                alert(\"Have not join yet!!\")\r\n                this.playbtn.interactable = true\r\n                break\r\n            case 4:\r\n                alert(\"Game has not started\")\r\n                this.playbtn.interactable = true\r\n                break\r\n        }\r\n        switch(retinfo[\"Score\"]){\r\n            case -1:\r\n                this.DieUI()\r\n                this.playbtn.interactable = true\r\n                break\r\n            case 0:\r\n                break\r\n            default:\r\n                this.yourscore += retinfo[\"Score\"]\r\n                this.playerlabel.string = this.yourname+\"  \"+(this.yourscore).toString()\r\n        }\r\n    }\r\n    JoinGameretManager(retinfo:Object){\r\n        switch(retinfo[\"Code\"]){\r\n            case 0:\r\n                var colortemp = new cc.Color(255-Math.floor(Math.random()*125),255-Math.floor(Math.random()*125),255-Math.floor(Math.random()*125))\r\n                this.playerlabel.string = this.namebox.string\r\n                this.yourname =this.namebox.string\r\n                this.yourscore = 0\r\n                this.playerlabel.node.color = colortemp\r\n                this.scorescrypt.customnewcolor(retinfo[\"Pid\"],colortemp)\r\n                if(this.auto_tg.isChecked){\r\n                    this.boardscrypt.autoclick(this.boardscrypt)\r\n                }\r\n                break\r\n            case 1:\r\n                alert(\"Name already in use!\")\r\n                this.playbtn.interactable = true\r\n                break\r\n            case 2:\r\n                alert(\"Current players is full!\")\r\n                this.playbtn.interactable = true\r\n                break\r\n            case 3:\r\n                alert(\"Game players is full!\")\r\n                this.playbtn.interactable = true\r\n                break\r\n            case 4:\r\n                alert(\"Already in the game!\")\r\n                break\r\n        }\r\n        \r\n    }\r\n    JoinGame(){\r\n        this.playbtn.interactable = false\r\n        this.SendToServerQueue(()=>(this.ActionJoinSendToServer(this.namebox.string)))\r\n    }\r\n    NewGame(){\r\n        this.SendToServerQueue(()=>(this.NewGameSendToServer(this.passwdbox.string)))\r\n    }\r\n    LogClicked(){\r\n        if(this.historyscore.length == 0){\r\n            this.logbtn.interactable = false\r\n            this.logbtn.getComponentInChildren(cc.Label).string = \"score\"\r\n            this.SendToServerQueue(this.GetHistorySendToServer)\r\n        }\r\n        else{\r\n            this.historyscore = []\r\n            this.logbtn.getComponentInChildren(cc.Label).string = \"log\"\r\n            this.logslider.node.active = false\r\n        }\r\n    }\r\n    SetupLog(retinfo:Object){\r\n        this.logbtn.interactable = true\r\n        let keys:string[] = Object.keys(retinfo).sort((a: string, b: string) => +retinfo[a][\"GID\"]-+retinfo[b][\"GID\"])\r\n        for(var i=0;i<keys.length;i++){\r\n            this.historyscore.push(retinfo[keys[i]][\"Players\"])\r\n        }\r\n        this.logslider.node.active = true\r\n        this.LogSelect(true)\r\n    }\r\n    LogSelect(force:boolean = false){\r\n        let oldstr = this.loggidlabel.string\r\n        this.loggidlabel.string = Math.round((this.historyscore.length-1)*this.logslider.progress).toString()\r\n        if(this.loggidlabel.string!=oldstr || force){\r\n            this.scorescrypt.SetScore(this.historyscore[+this.loggidlabel.string],this.scorescrypt,true)\r\n        }\r\n        \r\n    }\r\n/********************************** /OTHERFUNCTION/ **********************************/\r\n/* ******************************* UI FUNCTIONS ******************************* */\r\n    DisableAllUi(){\r\n        this.UiNode.active = false\r\n        this.connectui.active = false\r\n    }\r\n    DisableUi(){\r\n        this.UiNode.active = false\r\n        this.connectui.active = true\r\n    }\r\n    DieUI(){\r\n        cc.audioEngine.playEffect(this.cat_hiss,false)\r\n        this.DieNode.active = true\r\n        this.scheduleOnce(()=>{this.DieNode.active = false},4)\r\n    }\r\n    EnableUi(){\r\n        this.connectui.active = false\r\n        this.UiNode.active = true\r\n    }\r\n/* ******************************* /UI FUNCTIONS/ ******************************* */\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Score extends cc.Component {\r\n\r\n    @property(cc.RichText)\r\n    Namelabel: cc.RichText = null;\r\n    @property(cc.Label)\r\n    ScoreLabel: cc.Label = null;\r\n\r\n    player_color_map:Object = new Object();\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    //start () {}\r\n\r\n    SetScore(Playersobj:Object,target:any,replay:boolean = false) {\r\n        let keys:string[] = Object.keys(Playersobj)\r\n        keys.sort((a: string, b: string) => Playersobj[b][\"Score\"]-Playersobj[a][\"Score\"])\r\n        let thissize:cc.Size = target.node.getContentSize();\r\n        thissize.height = (keys.length+1)*20\r\n        target.node.setContentSize(thissize)\r\n        target.ScoreLabel.string = \"Score\\n\"\r\n        target.Namelabel.string = \"\"\r\n        let globaltemp = \"Name\\n\"\r\n        for(let i = 0; i < keys.length; i++){\r\n            let temp = Playersobj[keys[i]][\"Name\"]+\"\\n\"\r\n            if(!replay){\r\n                if(!(+keys[i] in target.player_color_map) ){\r\n                    target.player_color_map[+keys[i]] = new cc.Color(255-Math.floor(Math.random()*125),255-Math.floor(Math.random()*125),255-Math.floor(Math.random()*125))\r\n                }\r\n                let color = '#'+target.player_color_map[+keys[i]].toHEX(\"#rrggbb\")\r\n                globaltemp += \"<color=\"+color+\">\"+temp+\"</c>\"\r\n            }\r\n            else{\r\n                globaltemp+=temp\r\n            }\r\n            target.ScoreLabel.string+=Playersobj[keys[i]][\"Score\"].toString()+\"\\n\"\r\n        }\r\n        target.Namelabel.string=globaltemp\r\n        \r\n    }\r\n\r\n    customnewcolor(playerid:number,color:cc.Color){\r\n        this.player_color_map[playerid] = color\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n"],"file":"index.js"}